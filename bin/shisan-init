#!/usr/bin/env node

const program = require('commander')
const path = require('path')
const fs = require('fs')
const glob = require('glob')
const inquirer = require('inquirer')

const download = require('../lib/download')

program.usage('<project-name>').parse(process.argv)

let projectName = program.args[0]

if (!projectName) {
  projectName.help()
  return
}

const list = glob.sync('*')
let rootName = path.basename(process.cwd())
let next

if (list.length) {
  if (list.filter(name => {
    const filename = path.resolve(process.cwd(), path.join('.', name))
    const isDir = fs.lstatSync(filename).isDirectory()
    return name.indexOf(projectName) !== -1 && isDir
  }).length !== 0) {
    return console.log(`项目${projectName}已经存在`)
  }
  rootName = projectName
} else if (rootName === projectName) {
  next = inquirer.prompt([
    {
      name: 'buildInCurrent',
      message: '当前目录为空， 且目录名称和项目名称相同，是否直接在当前目录下创建新项目？',
      type: 'confirm',
      default: true
    }
  ]).then(answer => {
    return Promise.resolve(answer.buildInCurrent ? '.' : projectName)
  })
} else {
  next = Promise.resolve(projectName)
}

next && go()

function go() {
  next.then(projectRoot => {
    if (projectRoot !== '.') {
      fs.mkdirSync(projectRoot)
    }
    return download(projectRoot).then(target => {
      return {
        projectRoot, 
        downloadTemp: target
      }
    }).catch(err => {
      console.log(err)
    })
  })  
}